# We are using 2 types of testing infrastructure:
# 1. Service Bus to test the message pump itself which emits Event Grid events
# 2. Testing infrastructure to loop the Event Grid events back in our tests (depends on Service Bus)
name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/*

pr:
  paths:
    include:
      - src/*
      - build/ci-build.yml

parameters:
  - name: 'Package.Version.ManualTrigger'
    type: string
    default: 'preview'

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  - group: 'Arcus Messaging - Integration Testing'
  - group: 'Arcus - GitHub Package Registry'
  - group: 'Arcus Messaging - .NET'
  - group: 'Build Configuration'
  - template: ./variables/build.yml

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - template: 'nuget/determine-pr-version.yml@templates'
            parameters:
              manualTriggerVersion: ${{ parameters['Package.Version.ManualTrigger'] }}
          - template: 'build/build-solution.yml@templates'
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              versionSuffix: '$(packageVersion)'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: '**/?(bin|obj)/**'
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: test/run-unit-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Unit'

  - stage: DockerIntegrationTests
    displayName: Docker Integration Tests
    dependsOn: Build
    condition: succeeded()
    variables:
      - name: 'Images.ServiceBus.Queue'
        value: 'workers-service-bus-queue'
      - name: 'Images.ServiceBus.Topic'
        value: 'workers-service-bus-topic'
      - name: 'Arcus.Health.Port.Queue'
        value: '42063'
      - name: 'Arcus.Health.Port.Topic'
        value: '42064'
    jobs:
      - job: DockerIntegrationTests
        displayName: 'Run Docker integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: templates/build-and-run-worker-container.yml
            parameters:
              projectName: 'Arcus.Messaging.Tests.Workers.ServiceBus.Queue'
              containerName: '$(Images.ServiceBus.Queue)'
              imageName: '$(Images.ServiceBus.Queue)'
              imageTag: $(Build.BuildId)
              healthPort: $(Arcus.Health.Port.Queue)
              connectionString: '$(Arcus.ServiceBus.Docker.ConnectionStringWithQueue)'
          - template: templates/build-and-run-worker-container.yml
            parameters:
              projectName: 'Arcus.Messaging.Tests.Workers.ServiceBus.Topic'
              containerName: '$(Images.ServiceBus.Topic)'
              imageName: '$(Images.ServiceBus.Topic)'
              imageTag: $(Build.BuildId)
              healthPort: $(Arcus.Health.Port.Topic)
              connectionString: '$(Arcus.ServiceBus.Docker.ConnectionStringWithTopic)'
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'
              category: 'Docker'
          - task: PowerShell@2
            displayName: 'Get Docker container logs'
            inputs:
              targetType: 'inline'
              script: 'docker logs $(Images.ServiceBus.Queue)'
            condition: failed()

  - stage: SelfContainingIntegrationTests
    displayName: Self-Containing Integration Tests
    dependsOn: Build
    condition: succeeded()
    variables:
      - name: 'Arcus.Health.Port.Queue'
        value: '42063'
    jobs:
      - job: SelfContainingIntegrationTests
        displayName: 'Run self-containing integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'
              category: 'Integration'

  - stage: ReleaseToMyget
    displayName: 'Release to MyGet'
    dependsOn:
      [SelfContainingIntegrationTests, DockerIntegrationTests, UnitTests]
    condition: succeeded()
    jobs:
      - job: PushToMyGet
        displayName: 'Push to MyGet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: nuget/publish-preview-package.yml@templates
