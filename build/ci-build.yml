name: $(date:yyyyMMdd)$(rev:.r)

trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/*

pr:
  paths:
    include:
      - src/*
      - build/ci-build.yml

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

# 'Package.Version.ManualTrigger' is added as queue-time variable on build in Azure DevOps
# 'Arcus.ServiceBus.ConnectionStringWithQueue' is added as secret variable on build in Azure DevOps
# 'Arcus.TestInfra.Topic.ConnectionString' is added as secret variable on build in Azure DevOps
# 'EventGrid.Auth.Key' is added as secret variable on build in Azure DevOps
variables:
  - group: 'Arcus - GitHub Package Registry'
  - group: 'Build Configuration'
  # Always use fixed version for .NET Core SDK
  - name: 'DotNet.Sdk.Version'
    value: '3.0.101'
  - name: 'Project'
    value: 'Arcus.Messaging'
  - name: 'Arcus.Health.Port'
    value: '42063'
  - name: 'Arcus.EventGrid.Topic.Uri'
    value: '42063'
  - name: 'Arcus.TestInfra.Topic.Name'
    value: 'received-event-grid-events' # We are re-using the Event Grid integration infrastructure

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - template: 'nuget/determine-pr-version.yml@templates'
            parameters:
              manualTriggerVersion: $(Package.Version.ManualTrigger)
          - template: 'build/build-solution.yml@templates'
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              versionSuffix: '$(packageVersion)'
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: '**/?(bin|obj)/**'
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: IntegrationTests
    displayName: Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: IntegrationTests
        displayName: 'Run integration tests'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - task: Docker@1
            displayName: 'Build Docker image from test worker'
            inputs:
              dockerFile: src/$(Project).Tests.Worker/Dockerfile
              imageName: '$(Project).Tests.Worker:$(Build.BuildId)'
              useDefaultContext: false
              buildContext: src
          - task: Docker@1
            displayName: 'Run test worker from Docker image'
            inputs:
              command: 'Run an image'
              imageName: '$(Project).Tests.Worker:$(Build.BuildId)'
              containerName: '$(Project).Tests.Worker'
              ports: '$(Arcus.Health.Port):$(Arcus.Health.Port)'
              envVars: |
                ARCUS_HEALTH_PORT=$(Arcus.Health.Port)
                EVENTGRID_TOPIC_URI=$(Arcus.EventGrid.Topic.Uri)
                EVENTGRID_AUTH_KEY=$(Arcus.EventGrid.Auth.Key)
                ARCUS_SERVICEBUS_QUEUE_CONNECTIONSTRING=$(Arcus.ServiceBus.ConnectionStringWithQueue)
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'
              category: 'Integration'

  - stage: ReleaseToMyget
    displayName: 'Release to MyGet'
    dependsOn: IntegrationTests
    condition: succeeded()
    jobs:
      - job: PushToMyGet
        displayName: 'Push to MyGet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: nuget/publish-preview-package.yml@templates
