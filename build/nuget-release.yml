name: $(Package.Version)

trigger: none
pr: none

parameters:
  - name: 'Package.Version'
    type: 'string'

resources:
  repositories:
    - repository: templates
      type: github
      name: arcus-azure/azure-devops-templates
      endpoint: arcus-azure

variables:
  - group: 'Arcus Messaging - Integration Testing'
  - group: 'Arcus Security - Integration Testing'
  - group: 'Arcus - GitHub Package Registry'
  - group: 'Build Configuration'
  - template: ./variables/build.yml
  - template: ./variables/test.yml
  - name: 'Package.Version'
    value: ${{ parameters['Package.Version'] }}

stages:
  - stage: Build
    jobs:
      - job: Compile
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - template: build/build-solution.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              version: $(Build.BuildNumber)
          - task: CopyFiles@2
            displayName: 'Copy build artifacts'
            inputs:
              contents: '**/?(bin|obj)/**'
              targetFolder: '$(Pipeline.Workspace)/build'
          - task: PublishPipelineArtifact@0
            displayName: 'Publish build artifacts'
            inputs:
              targetPath: '$(Pipeline.Workspace)/build'
              artifactName: Build

  - stage: UnitTests
    displayName: Unit Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: UnitTests
        displayName: 'Run unit tests'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - task: UseDotNet@2
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.PreviousVersion))'
            inputs:
              packageType: 'sdk'
              version: '$(DotNet.Sdk.PreviousVersion)'
              includePreviewVersions: true
          - template: test/run-unit-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Unit'

  - stage: DockerIntegrationTests
    displayName: Docker Integration Tests
    dependsOn: Build
    condition: succeeded()
    jobs:
      - job: DockerIntegrationTests
        displayName: 'Run Docker integration tests'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: templates/run-docker-integration-tests.yml

  - stage: SelfContainingIntegrationTests
    displayName: Self-Containing Integration Tests
    dependsOn: Build
    condition: succeeded()
    variables:
      - name: 'Arcus.Health.Port.Queue'
        value: '42063'
    jobs:
      - job: SelfContainingIntegrationTests
        displayName: 'Run self-containing integration tests'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: UseDotNet@2
            displayName: 'Import .NET Core SDK ($(DotNet.Sdk.PreviousVersion))'
            inputs:
              packageType: 'sdk'
              version: '$(DotNet.Sdk.PreviousVersion)'
              includePreviewVersions: true
          - template: test/run-integration-tests.yml@templates
            parameters:
              dotnetSdkVersion: '$(DotNet.Sdk.Version)'
              projectName: '$(Project).Tests.Integration'
              category: 'Integration'

  - stage: Release
    displayName: 'Release to NuGet.org'
    dependsOn:
      [SelfContainingIntegrationTests, DockerIntegrationTests, UnitTests]
    condition: succeeded()
    jobs:
      - job: PushToNuGet
        displayName: 'Push to NuGet.org'
        pool:
          vmImage: '$(Vm.Image)'
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download build artifacts'
            inputs:
              artifact: 'Build'
              path: '$(Build.SourcesDirectory)'
          - template: github/create-release.yml@templates
            parameters:
              repositoryName: 'arcus-azure/arcus.messaging'
              releaseNotes: |
                Install the Arcus.Messaging packages that you need via NuGet, for instance [$(Project).Pumps.ServiceBus](https://www.nuget.org/packages/$(Project).Pumps.ServiceBus/$(Build.BuildNumber)):
                ```shell
                PM > Install-Package $(Project).Pumps.ServiceBus --Version $(Build.BuildNumber)
                ```
                For a complete list of all Arcus.Messaging packages see the [documentation](https://messaging.arcus-azure.net/).
                ## What's new?
                ### Features
                * Provide the capability to do something (#123)
                ### Fixes / Changes
                None.
                ### Breaking Changes
                None.
                ### Removal
                None.
          - template: nuget/publish-official-package.yml@templates
