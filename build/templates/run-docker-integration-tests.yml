steps:
- task: DownloadPipelineArtifact@2
  displayName: 'Download build artifacts'
  inputs:
    artifact: 'Build'
    path: '$(Build.SourcesDirectory)'
- template: build-and-run-worker-container.yml
  parameters:
    projectName: 'Arcus.Messaging.Tests.Workers.ServiceBus.Queue'
    containerName: '$(Images.ServiceBus.Queue)'
    imageName: '$(Images.ServiceBus.Queue)'
    imageTag: $(Build.BuildId)
    envVars: |
      ARCUS_HEALTH_PORT=$(Arcus.Health.Port.Queue)
      EVENTGRID_TOPIC_URI=$(Arcus.TestInfra.EventGrid.Topic.Uri)
      EVENTGRID_AUTH_KEY=$(Arcus.TestInfra.EventGrid.Auth.Key)
      ARCUS_SERVICEBUS_CONNECTIONSTRING=$(Arcus.ServiceBus.Docker.ConnectionStringWithQueue)
- template: build-and-run-worker-container.yml
  parameters:
    projectName: 'Arcus.Messaging.Tests.Workers.ServiceBus.Topic'
    containerName: '$(Images.ServiceBus.Topic)'
    imageName: '$(Images.ServiceBus.Topic)'
    imageTag: $(Build.BuildId)
    envVars: |
      ARCUS_HEALTH_PORT=$(Arcus.Health.Port.Topic)
      EVENTGRID_TOPIC_URI=$(Arcus.TestInfra.EventGrid.Topic.Uri)
      EVENTGRID_AUTH_KEY=$(Arcus.TestInfra.EventGrid.Auth.Key)
      ARCUS_SERVICEBUS_CONNECTIONSTRING=$(Arcus.ServiceBus.Docker.ConnectionStringWithTopic)
- template: build-and-run-az-func-container.yml
  parameters:
    projectName: 'Arcus.Messaging.Tests.Runtimes.AzureFunction.ServiceBus.Queue'
    containerName: '$(Images.AzureFunction.ServiceBus.Queue)'
    imageName: '$(Images.AzureFunction.ServiceBus.Queue)'
    imageTag: '$(Build.BuildId)'
    port: '$(Arcus.AzureFunctions.Queue.Port)'
- template: build-and-run-worker-container.yml
  parameters:
    projectName: 'Arcus.Messaging.Tests.Workers.EventHubs'
    containerName: '$(Images.EventHubs)'
    imageName: '$(Images.EventHubs)'
    imageTag: $(Build.BuildId)
    envVars: |
      ARCUS_HEALTH_PORT=$(Arcus.Health.Port.EventHubs)
      EVENTGRID_TOPIC_URI=$(Arcus.TestInfra.EventGrid.Topic.Uri)
      EVENTGRID_AUTH_KEY=$(Arcus.TestInfra.EventGrid.Auth.Key)
      EVENTHUBS_NAME=$(Arcus.EventHubs.Docker.EventHubsName)
      EVENTHUBS_CONNECIONSTRING=$(Arcus.EventHubs.ConnectionString)
      BLOBSTORAGE_CONTAINERNAME=$(Arcus.EventHubs.Docker.BlobStorage.ContainerName)
      STORAGEACCOUNT_CONNECTIONSTRING=$(Arcus.EventHubs.BlobStorage.StorageAccountConnectionString)
- template: test/run-integration-tests.yml@templates
  parameters:
    dotnetSdkVersion: '$(DotNet.Sdk.Version)'
    projectName: '$(Project).Tests.Integration'
    category: 'Docker'
- task: PowerShell@2
  displayName: 'Get Docker container logs for Service Bus Queue worker project'
  inputs:
    targetType: 'inline'
    script: 'docker logs $(Images.ServiceBus.Queue)'
  condition: failed()
- task: PowerShell@2
  displayName: 'Get Docker container logs for Service Bus Topic worker project'
  inputs:
    targetType: 'inline'
    script: 'docker logs $(Images.ServiceBus.Topic)'
  condition: failed()
- task: PowerShell@2
  displayName: 'Get Docker container logs for Azure Functions Service Bus Queue project'
  inputs:
    targetType: 'inline'
    script: 'docker logs $(Images.AzureFunction.ServiceBus.Queue)'
  condition: failed()